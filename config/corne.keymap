/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp Q      &kp W      &kp E      &kp R      &kp T      &kp Y      &kp U      &kp I       &kp O       &kp P
  &kp RC(A)  &kp LG(S)  &kp LA(D)  &kp LS(F)  &kp G      &kp RS(H)  &kp RA(J)  &kp RG(K)   &kp RC(L)   &kp BACKSPACE
  &kp Z      &kp X      &kp C      &kp V      &kp B      &kp N      &kp M      &kp COMMA   &kp PERIOD  &kp COLON
                        &kp TAB    &kp SPACE  &kp ESC    &kp SPACE  &tog 1     &kp RETURN
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp EXCLAMATION  &kp AT_SIGN         &kp HASH                  &kp DOLLAR            &kp PERCENT      &kp LCTRL         &kp AMPERSAND          &kp ASTERISK               &kp MINUS            &kp EQUAL
  &kp RC(TILDE)    &kp LG(LEFT_BRACE)  &kp LA(LEFT_PARENTHESIS)  &kp LS(LEFT_BRACKET)  &kp LESS_THAN    &kp GREATER_THAN  &kp RS(RIGHT_BRACKET)  &kp RA(RIGHT_PARENTHESIS)  &kp RG(RIGHT_BRACE)  &kp RC(BACKSPACE)
  &kp GRAVE        &none               &kp SEMI                  &kp COLON             &kp QUESTION     &kp BACKSLASH     &kp PIPE               &kp SLASH                  &kp SQT              &kp DOUBLE_QUOTES
                                       &kp TAB                   &to 0                 &kp ESC          &kp SPACE         &tog 2                 &kp RETURN
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp NUMBER_1      &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_4   &kp N5       &kp NUMBER_6  &kp N7        &kp N8      &kp N9         &kp N0
  &kp RC(ASTERISK)  &kp LG(SLASH)  &kp LA(PLUS)  &kp LS(MINUS)  &kp EQUAL    &kt LEFT      &kp RS(DOWN)  &kp RA(UP)  &kp RG(RIGHT)  &kp RC(BACKSPACE)
  &none             &none          &none         &none          &none        &trans        &trans        &trans      &trans         &trans
                                   &kp TAB       &to 0          &kp ESC      &kp SPACE     &tog 3        &kp ENTER
            >;
        };

        layer_3 {
            bindings = <
  &kp F1        &kp F2          &kp F3                &kp F4              &kp F5                  &kp F6      &kp F7             &kp F8           &kp F9  &kp F10
  &kp C_REWIND  &kp C_PREVIOUS  &kp C_NEXT            &kp C_FAST_FORWARD  &kp C_PLAY_PAUSE        &none       &none              &none            &none   &trans
  &trans        &trans          &trans                &trans              &trans                  &trans      &trans             &trans           &trans  &trans
                                &kp C_BRIGHTNESS_DEC  &to 0               &kp C_BRIGHTNESS_INC    &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
            >;
        };
    };
};
